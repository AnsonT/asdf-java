#!/usr/bin/env bash

# this is global for error reporting
ASDF_JAVA_ERROR=""

# Download the java source from Oracle, copy files and cleanup.
install_java() {
	local version=$1
	local destdir=$2

	local variant=$(get_variant)
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	get_java $version $variant $destdir
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	unpack_java $version $variant $destdir
	[[ -z "$ASDF_JAVA_ERROR" ]] || return
}

# Get the "variant" piece of the Oracle url.
get_variant() {
	case "$(uname -s)" in
		Linux)
			case "$(uname -m)" in
				x86_64) echo linux-x64.tar.gz ;;
				i[[3-9]]86) echo linux-i586.tar.gz ;;
				*) ASDF_JAVA_ERROR="$(uname -m) is not a supported architecture on linux" ;;
			esac ;;
		Darwin)
			case "$(uname -m)" in
				x86_64) echo macosx-x64.dmg ;;
				*) ASDF_JAVA_ERROR="$(uname -m) is not a supported architecture on macosx" ;;
			esac ;;
		*) ASDF_JAVA_ERROR="$(uname -s) is not a supported operating system" ;;
	esac
}

# Download java from Oracle.
#
# TODO: Capture errors from curl.
get_java() {
	local version=$1
	local variant=$2
	local destdir=$3

	# kind of installation (jdk, jre, etc.)
	local kine=$(echo $version | cut -d '-' -f 1)
	# full version number (major and minor) (8u144, 8u141, etc.)
	local full=$(echo $version | cut -d '-' -f 2)

	local url=
	local base=http://download.oracle.com/otn-pub/java/$kine/$full

	case $version in
		jdk-8u144) url=$base-b01/090f390dda5b47b9b721c7dfaa008135/$version-$variant ;;
		jdk-8u144) url=$base-b01/090f390dda5b47b9b721c7dfaa008135/$version-$variant ;;
		jdk-8u141) url=$base-b15/336fa29ff2bb4ef291e347e091f7f4a7/$version-$variant ;;
		jdk-8u131) url=$base-b11/d54c1d3a095b4ff2b6607d096fa80163/$version-$variant ;;
		jdk-8u121) url=$base-b13/e9e7ea248e2c4826b92b3f075a80e441/$version-$variant ;;
		*) ASDF_JAVA_ERROR="$version is not a supported version" ;;
	esac
	[[ -z "$ASDF_JAVA_ERROR" ]] || return

	curl -fLC - --retry 3 --retry-delay 3 -b oraclelicense=a -o $destdir/$variant $url
}

# Unpacks all kinds of sources.
unpack_java() {
	local version=$1
	local variant=$2
	local destdir=$3

	case $variant in
		*.tar.gz) unpack_tar $variant $destdir ;;
		*.dmg) unpack_dmg $variant $destdir ;;
		*) ASDF_JAVA_ERROR="$variant is not a supported install variant" ;;
	esac
}

# Unarchive a tar archive into the install directory and cleanup.
#
# NOTE: Using $origin as a memo rather than executing in a subshell
#   because errors won't be persisted from a subshell.
#
# TODO: Should be sanitized with error reporting.
unpack_tar() {
	local variant=$1
	local destdir=$2

	local origin=$(pwd)
	cd $destdir; {
		tar -xzf $variant && rm $variant
	}
	cd $origin
}

# Unarchive a tar archive into the install directory and cleanup.
#
# NOTE: Using $origin as a memo rather than executing in a subshell
#   because errors won't be persisted from a subshell.
#
# TODO: Should be sanitized with error reporting.
unpack_dmg() {
	local variant=$1
	local destdir=$2

	local pkgdir=asdf_tmp_pkgdir
	local imgdir=asdf_tmp_imgdir

	local origin=$(pwd)
	cd $destdir; {
		hdiutil mount -mountpoint $pkgdir $variant
		pkgutil --expand $imgdir/*.pkg $pkgdir

		cd $pkgdir/jdk*.pkg; {
			cat Payload | gzip -d | cpio -i
			mv Contents/Home/* $destdir/
		}
		cd $destdir

		hdiutil unmount $destdir/$imgdir
		rm -r $destdir/$imgdir
		rm -r $destdir/$variant
	}
	cd $origin
}

#
# MAIN
#
install_java $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH

[[ -z "$ASDF_JAVA_ERROR" ]] || echo "ERROR: $ASDF_JAVA_ERROR."
unset ASDF_JAVA_ERROR
